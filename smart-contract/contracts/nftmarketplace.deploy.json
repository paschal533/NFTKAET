{"address":"ct_25dDFHCSJYAGUssjuqWvnrMRCbvGWveo5sPXMJZiCLeyNsEC5H","bytecode":"cb_+QPMRgOgrG1ZeoAXbwyVBI2qIphN+jyKZqxDZmPOFTc77R3/JmjAuQOeuQMO/jg7qskANwAnNwYHRwBHAAd3FwECjP45tvysADcCdwcHDAKOVQBeAAwBAgwBAAwDfycMDA8CBhoKCI40OAYDOQqMjBECji1qiooIAC2qiIgIBl4ADAECDAIIRPwzBgYGAAYCAxFlpeAPDwJvgibPAQII/kTWRB8ANwA3AFUChhoOiC8AGg6KLwAaDowDGg6CJU5GVEthc3RsZRoOhA1ORksaDo4AAQM//lVa/vYANwIHBzcAGgoAiFUAKxgAACgMBCAABwwE+wOpT25seSBpdGVtIG93bmVyIGNhbiBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uKxoUiAAp7AoUfy0aiIgAKxo0iAApbAY0Ai0aiIgAKxpUiABVAlYprAJUVi0aiIgAKxp2iABeAngprAR2eC0aiIgAXgAMAQIMAQBE/DMGBgYCBgQDEWWl4A/+Y5TpegA3AQd3KxiKAAD+ZaXgDwI3AYcDNwNHAAcHNwNHAAcHNwNHAAcHNwAJ/QACBAZGNgAAAEY2AgACRjYEAARkAq9fnwGB11gMhLhpOyz5zsCqvoNYf/ovpt/LDpcv9ttACdhwxdsAAgQBAz9GNgAAAEY2AgACRjYEAARkAq9fnwGBxTlVJS+ggkWgzt3QxMmPgxtH7M1fIQfm7otSvnx9W7AAAgQBAz9GNgAAAEY2AgACRjYEAARkAq9fnwGBABbsB21KKMPbBPdtTdHFg5o4pNSTbE27mF2SCwZmA5AAAgQBAz/+3go/wgA3ACd3AQMTIW1pbnRhYmxl/v4l/lIENwEHNwAaCgCIKxgAACgOAgYLACAgAgcMBPsDAQBQbGVhc2Ugc3VibWl0IHRoZSBhc2tpbmcgcHJpY2UgaW4gb3JkZXIgdG8gY29tcGxldGUgdGhlIHB1cmNoYXNlGgoIiAsAKxgIACgMAmUAKxoYiAAp7AoY/y0aiIgAKxo4iABVAjoprAQ4Oi0aiIgAKxpaiABeAlwprAJaXC0aiIgAGgpuiCsYbgAoDAQMAgIMAQBE/DMGBgYEBgQDEWWl4A+4iC8IETg7qslBZmV0Y2hNYXJrZXRJdGVtcxE5tvysLWNyZWF0ZVRva2VuEUTWRB8RaW5pdBFVWv72LXJlc2VsbFRva2VuEWOU6XohbWV0YWRhdGERZaXgDy1DaGFpbi5ldmVudBHeCj/CRWFleDE0MV9leHRlbnNpb25zEf4l/lIhYnV5VG9rZW6CLwCFNi4xLjAAkp4QYw==","aci":{"encodedAci":{"contract":{"event":{"variant":[{"MarketItemCreated":["address","int","int"]},{"ResellToken":["address","int","int"]},{"BuyToken":["address","int","int"]}]},"functions":[{"arguments":[],"name":"init","payable":false,"returns":"NFTMarketplace.state","stateful":true},{"arguments":[{"name":"metadata","type":"string"},{"name":"_price","type":"int"}],"name":"createToken","payable":false,"returns":"int","stateful":true},{"arguments":[{"name":"token_id","type":"int"}],"name":"metadata","payable":false,"returns":"string","stateful":false},{"arguments":[],"name":"aex141_extensions","payable":false,"returns":{"list":["string"]},"stateful":false},{"arguments":[{"name":"tokenId","type":"int"},{"name":"price","type":"int"}],"name":"resellToken","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"tokenId","type":"int"}],"name":"buyToken","payable":true,"returns":{"tuple":[]},"stateful":true},{"arguments":[],"name":"fetchMarketItems","payable":false,"returns":{"list":["NFTMarketplace.marketItem"]},"stateful":false}],"kind":"contract_main","name":"NFTMarketplace","payable":false,"state":{"record":[{"name":"name","type":"string"},{"name":"symbol","type":"string"},{"name":"owner","type":"address"},{"name":"idToMarketItem","type":{"map":["int","NFTMarketplace.marketItem"]}},{"name":"metadata","type":{"map":["int","string"]}},{"name":"marketItemsList","type":{"list":["NFTMarketplace.marketItem"]}},{"name":"counter","type":"int"}]},"type_defs":[{"name":"metadata_type","typedef":{"variant":[{"URL":[]},{"IPFS":[]},{"OBJECT_ID":[]},{"MAP":[]}]},"vars":[]},{"name":"metadata","typedef":{"variant":[{"MetadataIdentifier":["string"]},{"MetadataMap":[{"map":["string","string"]}]}]},"vars":[]},{"name":"marketItem","typedef":{"record":[{"name":"tokenId","type":"int"},{"name":"seller","type":"address"},{"name":"owner","type":"address"},{"name":"price","type":"int"},{"name":"metadata_Url","type":"string"},{"name":"sold","type":"bool"}]},"vars":[]}]}},"externalEncodedAci":[{"namespace":{"name":"ListInternal","type_defs":[]}},{"namespace":{"name":"List","type_defs":[]}},{"namespace":{"name":"Option","type_defs":[]}},{"namespace":{"name":"String","type_defs":[]}}],"interface":"\n\n\n\nmain contract NFTMarketplace =\n  record state = {name : string,symbol : string,owner : address,idToMarketItem : map(int, NFTMarketplace.marketItem),metadata : map(int, string),marketItemsList : list(NFTMarketplace.marketItem),counter : int}\n  datatype event = MarketItemCreated(address, int, int) | ResellToken(address, int, int) | BuyToken(address, int, int)\n  datatype metadata_type = URL | IPFS | OBJECT_ID | MAP\n  datatype metadata = MetadataIdentifier(string) | MetadataMap(map(string, string))\n  record marketItem = {tokenId : int,seller : address,owner : address,price : int,metadata_Url : string,sold : bool}\n  stateful entrypoint init : () => NFTMarketplace.state\n  stateful entrypoint createToken : (string, int) => int\n  entrypoint metadata : (int) => string\n  entrypoint aex141_extensions : () => list(string)\n  stateful entrypoint resellToken : (int, int) => unit\n  payable stateful entrypoint buyToken : (int) => unit\n  entrypoint fetchMarketItems : () => list(NFTMarketplace.marketItem)\n"}}
